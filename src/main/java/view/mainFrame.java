/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import dao.ClientDao;
import dao.ComputerDao;
import dao.FoodDao;
import entity.Client;
import entity.ComHistory;
import entity.Computer;
import entity.Food;
import utils.DateUtils;


public class mainFrame extends javax.swing.JFrame {

    private String[] columnNames = new String[] {
            "ID", "Họ tên", "Tuổi", "Giới tính", "SĐT", "Số dư", "Ưu đãi", "Tổng nạp"
    };

    private String[] comColumnNames = new String[] {
            "ID", "Model", "Giá máy/h", "Phòng máy", "Người sử dụng", "Thời gian bắt đầu", "Thời gian còn lại"
    };
    private String[] foodColumnNames = new String[] {
            "ID", "Tên món", "Đơn giá", "Đã bán"
    };
    NumberFormat numFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
    DecimalFormat format2 = (DecimalFormat) NumberFormat.getPercentInstance();

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel10 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        discountLabel = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        ageField = new javax.swing.JTextField();
        phoneField = new javax.swing.JTextField();
        balanceField = new javax.swing.JTextField();
        discountField = new javax.swing.JTextField();
        totalField = new javax.swing.JTextField();
        genderCombobox = new javax.swing.JComboBox<>();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        statBtn = new javax.swing.JButton();
        chargeBtn = new javax.swing.JButton();
        sortCombobox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientTable = new javax.swing.JTable();
        nameSearchField = new javax.swing.JTextField();
        balanceSearchBtn = new javax.swing.JButton();
        fromBalanceSearchField = new javax.swing.JTextField();
        toBalanceSearchField = new javax.swing.JTextField();
        nameSearchBtn = new javax.swing.JButton();
        fromLabel = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        cltBackBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        comIdLabel = new javax.swing.JLabel();
        comModelLabel = new javax.swing.JLabel();
        comPriceLabel = new javax.swing.JLabel();
        comIdField = new javax.swing.JTextField();
        comModelField = new javax.swing.JTextField();
        comPriceField = new javax.swing.JTextField();
        comAddBtn = new javax.swing.JButton();
        comEditBtn = new javax.swing.JButton();
        comDelBtn = new javax.swing.JButton();
        comClearBtn = new javax.swing.JButton();
        comUserLabel = new javax.swing.JLabel();
        comUserField = new javax.swing.JTextField();
        comStartedTimeLabel = new javax.swing.JLabel();
        comStartedTimeField = new javax.swing.JTextField();
        comLeftTimeLabel = new javax.swing.JLabel();
        comLeftTimeField = new javax.swing.JTextField();
        comRentBtn = new javax.swing.JButton();
        comReturnBtn = new javax.swing.JButton();
        comSortCombobox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        comTable = new javax.swing.JTable();
        comPriceLabel6 = new javax.swing.JLabel();
        comRoomField = new javax.swing.JTextField();
        idleComList = new javax.swing.JButton();
        usingComList = new javax.swing.JButton();
        historyBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        comIdLabel1 = new javax.swing.JLabel();
        comModelLabel1 = new javax.swing.JLabel();
        comPriceLabel1 = new javax.swing.JLabel();
        foodPriceField = new javax.swing.JTextField();
        foodNameField = new javax.swing.JTextField();
        foodIdField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        foodTable = new javax.swing.JTable();
        comPriceLabel2 = new javax.swing.JLabel();
        foodSearchField = new javax.swing.JTextField();
        fromLabel1 = new javax.swing.JLabel();
        fromPriceSearchField = new javax.swing.JTextField();
        toLabel1 = new javax.swing.JLabel();
        toPriceSearchField = new javax.swing.JTextField();
        priceSearchBtn = new javax.swing.JButton();
        foodSearchBtn = new javax.swing.JButton();
        foodSortCombobox = new javax.swing.JComboBox<>();
        foodAddBtn = new javax.swing.JButton();
        foodEditBtn = new javax.swing.JButton();
        foodClearBtn = new javax.swing.JButton();
        foodDelBtn = new javax.swing.JButton();
        billBtn = new javax.swing.JButton();
        comPriceLabel3 = new javax.swing.JLabel();
        billField = new javax.swing.JTextField();
        comPriceLabel4 = new javax.swing.JLabel();
        payCheckBox = new javax.swing.JCheckBox();
        resetBillBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        cart = new javax.swing.JTextArea();
        comIdLabel2 = new javax.swing.JLabel();
        qtySpinner = new javax.swing.JSpinner();
        comPriceLabel5 = new javax.swing.JLabel();
        foodBackBtn = new javax.swing.JButton();
        orderCom = new javax.swing.JComboBox<>();
        foodStatbtn = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTabbedPane2.setName(""); // NOI18N

        idLabel.setText("ID:");

        nameLabel.setText("Tên:");

        ageLabel.setText("Tuổi:");

        genderLabel.setText("Giới tính:");

        phoneLabel.setText("SĐT:");

        balanceLabel.setText("Số dư:");

        discountLabel.setText("Ưu đãi(%):");

        totalLabel.setText("Tổng nạp:");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        totalField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalFieldActionPerformed(evt);
            }
        });

        genderCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ", "Khác" }));

        addBtn.setText("Thêm");

        editBtn.setText("Sửa");

        delBtn.setText("Xóa");

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        statBtn.setText("Thống kê");

        chargeBtn.setText("Nạp tiền");
        chargeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargeBtnActionPerformed(evt);
            }
        });

        sortCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sắp xếp theo ID", "Sắp xếp theo tên", "Sắp xếp theo số dư", "Sắp xếp theo tổng nạp" }));

        clientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Họ tên", "Tuổi", "Giới tính", "SĐT", "Số dư", "Ưu đãi", "Tổng nạp"
            }
        ));
        clientTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(clientTable);
        if (clientTable.getColumnModel().getColumnCount() > 0) {
            clientTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        balanceSearchBtn.setText("Tìm kiếm số dư");

        nameSearchBtn.setText("Tìm kiếm tên");

        fromLabel.setText("Từ:");

        toLabel.setText("Đến:");

        cltBackBtn.setText("Quay lại");
        cltBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cltBackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(discountLabel)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(balanceLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(genderLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(genderCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(discountField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(balanceField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(delBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(sortCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chargeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(fromLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(fromBalanceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(toLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toBalanceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nameSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(balanceSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cltBackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(149, 149, 149))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageLabel)
                    .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genderLabel)
                    .addComponent(genderCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(balanceLabel)
                    .addComponent(balanceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discountLabel)
                    .addComponent(discountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalLabel)
                    .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(editBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearBtn))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delBtn)))
                .addGap(18, 18, 18)
                .addComponent(chargeBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statBtn)
                .addGap(18, 18, 18)
                .addComponent(sortCombobox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameSearchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromBalanceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toBalanceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(balanceSearchBtn)
                    .addComponent(fromLabel)
                    .addComponent(toLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cltBackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
        );

        jTabbedPane2.addTab("Khách hàng", jPanel4);

        comIdLabel.setText("ID:");

        comModelLabel.setText("Model:");

        comPriceLabel.setText("Giá máy/h");

        comAddBtn.setText("Thêm");

        comEditBtn.setText("Sửa");

        comDelBtn.setText("Xóa");

        comClearBtn.setText("Clear");
        comClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comClearBtnActionPerformed(evt);
            }
        });

        comUserLabel.setText("Người sử dụng");

        comStartedTimeLabel.setText("Thời gian bắt đầu");

        comLeftTimeLabel.setText("Thời gian còn lại");

        comLeftTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comLeftTimeFieldActionPerformed(evt);
            }
        });

        comRentBtn.setText("Thuê máy");

        comReturnBtn.setText("Trả máy");

        comSortCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sắp xếp theo ID", "Sắp xếp theo tên", "Sắp xếp theo giá máy" }));

        comTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Model", "Giá máy/h", "Phòng máy", "Người sử dụng", "Thời gian bắt đầu", "Thời gian còn lại"
            }
        ));
        comTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(comTable);
        if (comTable.getColumnModel().getColumnCount() > 0) {
            comTable.getColumnModel().getColumn(0).setMinWidth(20);
            comTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            comTable.getColumnModel().getColumn(0).setMaxWidth(20);
        }

        comPriceLabel6.setText("Phòng máy");

        idleComList.setText("DS máy trống");
        idleComList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idleComListActionPerformed(evt);
            }
        });

        usingComList.setText("DS máy đang sử dụng");
        usingComList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usingComListActionPerformed(evt);
            }
        });

        historyBtn.setText("Lịch sử sử dụng máy");
        historyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comStartedTimeLabel)
                                            .addComponent(comLeftTimeLabel)
                                            .addComponent(comUserLabel))
                                        .addGap(31, 31, 31)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(comLeftTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comStartedTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comUserField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(comIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(comPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(comModelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(35, 35, 35)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(comModelField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(comPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(comIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(comPriceLabel6)
                                                .addGap(30, 30, 30)
                                                .addComponent(comRoomField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(comReturnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(26, 26, 26)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(comAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(comDelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(comEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(comClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(23, 23, 23)
                                            .addComponent(comSortCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addComponent(comRentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usingComList, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(historyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idleComList, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comIdLabel)
                    .addComponent(comIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comModelLabel)
                    .addComponent(comModelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comPriceLabel)
                    .addComponent(comPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comPriceLabel6)
                    .addComponent(comRoomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comAddBtn)
                    .addComponent(comEditBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comDelBtn)
                    .addComponent(comClearBtn))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comUserLabel)
                    .addComponent(comUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comStartedTimeLabel)
                    .addComponent(comStartedTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comLeftTimeLabel)
                    .addComponent(comLeftTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comRentBtn)
                .addGap(8, 8, 8)
                .addComponent(comReturnBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comSortCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(idleComList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usingComList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historyBtn)
                .addContainerGap(94, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Máy tính", jPanel1);

        comIdLabel1.setText("ID:");

        comModelLabel1.setText("Tên món:");

        comPriceLabel1.setText("Đơn giá:");

        foodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Tên món", "Đơn giá"
            }
        ));
        jScrollPane3.setViewportView(foodTable);
        if (foodTable.getColumnModel().getColumnCount() > 0) {
            foodTable.getColumnModel().getColumn(0).setResizable(false);
            foodTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        comPriceLabel2.setText("Số lượng mua:");

        fromLabel1.setText("Từ:");

        toLabel1.setText("Đến:");

        priceSearchBtn.setText("Tìm kiếm giá món");

        foodSearchBtn.setText("Tìm kiếm tên món");

        foodSortCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sắp xếp theo ID", "Sắp xếp theo tên món", "Sắp xếp theo giá", "Sắp xếp theo số đã bán" }));
        foodSortCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodSortComboboxActionPerformed(evt);
            }
        });

        foodAddBtn.setText("Thêm");

        foodEditBtn.setText("Sửa");

        foodClearBtn.setText("Clear");
        foodClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodClearBtnActionPerformed(evt);
            }
        });

        foodDelBtn.setText("Xóa");

        billBtn.setText("Thanh toán");
        billBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billBtnActionPerformed(evt);
            }
        });

        comPriceLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        comPriceLabel3.setText("Tổng hóa đơn");

        billField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        billField.setText("0 ₫");

        comPriceLabel4.setText("Thêm vào giỏ:");

        payCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        payCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payCheckBoxActionPerformed(evt);
            }
        });

        resetBillBtn.setText("Reset hóa đơn");
        resetBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBillBtnActionPerformed(evt);
            }
        });

        cart.setColumns(20);
        cart.setRows(5);
        jScrollPane4.setViewportView(cart);

        comIdLabel2.setText("Giỏ hàng:");

        qtySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        qtySpinner.setMinimumSize(new java.awt.Dimension(150, 22));

        comPriceLabel5.setText("Máy đặt:");

        foodBackBtn.setText("Quay lại");

        orderCom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        foodStatbtn.setText("Thống kê");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(foodDelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(17, 17, 17))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(foodAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(foodEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(foodClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(billBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(resetBillBtn)))
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comIdLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comPriceLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comModelLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(foodNameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(foodPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(foodIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(comPriceLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(payCheckBox)
                                .addGap(66, 66, 66))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(comPriceLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(qtySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(comPriceLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orderCom, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(foodSortCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(foodStatbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(comPriceLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(billField))
                                    .addComponent(comIdLabel2)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(fromLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(fromPriceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toPriceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(foodSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priceSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(foodBackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(foodSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(136, 136, 136))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comIdLabel1)
                            .addComponent(foodIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comModelLabel1)
                            .addComponent(foodNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comPriceLabel1)
                            .addComponent(foodPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(foodAddBtn)
                            .addComponent(foodEditBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(foodDelBtn)
                            .addComponent(foodClearBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comPriceLabel2)
                            .addComponent(qtySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comPriceLabel5)
                            .addComponent(orderCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(payCheckBox)
                            .addComponent(comPriceLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(billBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetBillBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comIdLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comPriceLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(billField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(foodSortCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(foodStatbtn))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(foodSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(foodSearchBtn))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toPriceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toLabel1)
                            .addComponent(fromPriceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromLabel1)
                            .addComponent(priceSearchBtn))
                        .addGap(5, 5, 5)
                        .addComponent(foodBackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Dịch vụ khác", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1014, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chargeBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_chargeBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_chargeBtnActionPerformed

    private void cltBackBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cltBackBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_cltBackBtnActionPerformed

    private void idleComListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_idleComListActionPerformed

    }// GEN-LAST:event_idleComListActionPerformed

    private void idleComList1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_idleComList1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_idleComList1ActionPerformed

    private void usingComListActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_usingComListActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_usingComListActionPerformed

    private void historyBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_historyBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_historyBtnActionPerformed

    private void foodSortComboboxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_foodSortComboboxActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_foodSortComboboxActionPerformed

    private void orderComActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_orderComActionPerformed
    }// GEN-LAST:event_orderComActionPerformed

    double totalBill = 0;
    String[] existID = new String[1000];

    private void payCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_payCheckBoxActionPerformed
        int qty = Integer.parseInt(qtySpinner.getValue().toString());
        double price = Double.parseDouble(foodPriceField.getText().toString());
        if (qty != 0 && payCheckBox.isSelected()) {
            String text = String.format("\n%s * %d: ", foodNameField.getText(), qty) + numFormat.format(qty * price);
            existID[Integer.parseInt(foodIdField.getText().toString())] = text;
            cart.setText(cart.getText() + text);
            totalBill += qty * price;
            billField.setText(numFormat.format(totalBill));
            Food food = getFoodInfo();
            FoodDao dao = new FoodDao();
            List<Food> list = dao.getListFoods();
            int size = list.size();
            for (int i = 0; i < size; i++) {
                if (list.get(i).getId() == food.getId()) {
                    list.get(i).setQty(qty);
                }
            }
            dao.writeListFood(list);
            showListFoods(list);
        } else if (payCheckBox.isSelected() && qty == 0) {
            payCheckBox.setSelected(false);
            showMessage("Số lượng sản phẩm không hợp lệ");
        } else if (!payCheckBox.isSelected()) {
            cart.setText(cart.getText().replace(existID[Integer.parseInt(foodIdField.getText().toString())], ""));
            totalBill -= qty * price;
            billField.setText(numFormat.format(totalBill));
            Food food = getFoodInfo();
            FoodDao dao = new FoodDao();
            List<Food> list = dao.getListFoods();
            int size = list.size();
            for (int i = 0; i < size; i++) {
                if (list.get(i).getId() == food.getId()) {
                    list.get(i).setQty(list.get(i).getQty() - qty);
                }
            }
            dao.writeListFood(list);
            showListFoods(list);
            qtySpinner.setValue(0);
        }
    }// GEN-LAST:event_payCheckBoxActionPerformed

    private void resetBillBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resetBillBtnActionPerformed
        totalBill = 0;
        for (String a : existID) {
            a = "";
        }
        payCheckBox.setSelected(false);
        qtySpinner.setValue(0);
        qtySpinner.setEnabled(false);
        cart.setText("");
        billField.setText(numFormat.format(totalBill));
        clearFoodInfo();
        showMessage("Đã reset hóa đơn");
    }// GEN-LAST:event_resetBillBtnActionPerformed

    private void billBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_billBtnActionPerformed
        if (cart.getText().toString().isEmpty() || cart.getText().toString().isBlank()) {
            showMessage("Hãy chọn sản phẩm trước khi thanh toán!");
        }
        // else if (orderCom.getText() == null || orderCom.getText().equals("")) {
        // orderCom.requestFocus();
        // showMessage("Tên máy đặt không được trống!");
        // }
        else {
            ImageIcon originalIcon = new ImageIcon("chuyenkhoan.jpg");

            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

            int iconWidth = 600;
            int iconHeight = (int) (originalIcon.getIconHeight() * ((double) iconWidth / originalIcon.getIconWidth()));
            if (iconHeight > screenSize.height / 2) {
                iconHeight = screenSize.height / 2;
                iconWidth = (int) (originalIcon.getIconWidth() * ((double) iconHeight / originalIcon.getIconHeight()));
            }

            ImageIcon resizedIcon = new ImageIcon(
                    originalIcon.getImage().getScaledInstance(iconWidth, iconHeight, Image.SCALE_SMOOTH));

            String text = String.format("Vui lòng thanh toán số tiền %s qua STK sau:", billField.getText());

            JPanel panel = new JPanel();
            panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

            JLabel textLabel = new JLabel(text);
            textLabel.setAlignmentX(CENTER_ALIGNMENT);
            panel.add(textLabel);

            JLabel iconLabel = new JLabel(resizedIcon);
            iconLabel.setAlignmentX(CENTER_ALIGNMENT);
            panel.add(iconLabel);

            JOptionPane.showMessageDialog(null, panel, "Thanh toán", JOptionPane.INFORMATION_MESSAGE);
            Food.setBill(Integer.parseInt(billField.getText().toString().replace(" ₫", "").replace(".", "")));
        }
    }// GEN-LAST:event_billBtnActionPerformed

    private void comSortBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_comSortBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_comSortBtnActionPerformed

    private void comLeftTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_comLeftTimeFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_comLeftTimeFieldActionPerformed

    private void comClearBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_comClearBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_comClearBtnActionPerformed

    private void foodSortBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_foodSortBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_foodSortBtnActionPerformed

    private void foodClearBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_foodClearBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_foodClearBtnActionPerformed

    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sortBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_sortBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_clearBtnActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_nameFieldActionPerformed

    private void totalFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_totalFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_totalFieldActionPerformed

    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    public void showListClients(List<Client> list) {
        int size = list.size();
        Object[][] clients = new Object[size][8];
        for (int i = 0; i < size; i++) {
            clients[i][0] = list.get(i).getId();
            clients[i][1] = list.get(i).getName();
            clients[i][2] = list.get(i).getAge();
            clients[i][3] = list.get(i).getGender();
            clients[i][4] = list.get(i).getPhone();
            clients[i][5] = numFormat.format(list.get(i).getBalance());
            clients[i][6] = format2.format(list.get(i).getDiscount());
            clients[i][7] = numFormat.format(list.get(i).getTotal());
        }
        clientTable.setModel(new DefaultTableModel(clients, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        idField.setEditable(false);
        balanceField.setEditable(false);
        discountField.setEditable(false);
        totalField.setEditable(false);
    }

    public void showListComputers(List<Computer> list) {
        new Thread(() -> {
            while (true) {
                int size = list.size();
                Object[][] computers = new Object[size][7];
                for (int i = 0; i < size; i++) {
                    computers[i][0] = list.get(i).getId();
                    computers[i][1] = list.get(i).getModel();
                    computers[i][2] = numFormat.format(list.get(i).getPrice());
                    computers[i][3] = list.get(i).getRoom();
                    computers[i][4] = list.get(i).getUser();
                    if (list.get(i).isIsUsed() && list.get(i).getLeftTime() > 0) {
                        computers[i][5] = DateUtils.getTime(list.get(i).getStartedTime());
                        long millis = list.get(i).getLeftTime();
                        long hours = TimeUnit.MILLISECONDS.toHours(millis);
                        long minutes = TimeUnit.MILLISECONDS.toMinutes(millis) - TimeUnit.HOURS.toMinutes(hours);
                        long seconds = TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(minutes)
                                - TimeUnit.HOURS.toSeconds(hours);
                        computers[i][6] = String.format("%02d:%02d:%02d", hours, minutes, seconds);
                        list.get(i).setLeftTime(millis - 1000);
                    } else if (list.get(i).isIsUsed() == true && list.get(i).getLeftTime() <= 0) {
                        ComputerDao dao = new ComputerDao();
                        ClientDao dao2 = new ClientDao();
                        if (dao.returnCom(list.get(i))) {

                            list.get(i).setIsUsed(false);
                            list.get(i).setUser("");
                            list.get(i).setStartedTime(0);
                            list.get(i).setLeftTime(0);
                            showMessage(
                                    "Đã trả máy " + list.get(i).getModel() + " do số dư không đủ duy trì hoạt động");

                            showListClients(dao2.readListClient());
                        } else
                            showMessage("Lỗi");
                    } else {
                        computers[i][5] = 0;
                        computers[i][6] = 0;
                    }
                }
                comTable.setModel(new DefaultTableModel(computers, comColumnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                });
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
        comUserField.setEditable(false);
        comStartedTimeField.setEditable(false);
        comLeftTimeField.setEditable(false);
        comIdField.setEditable(false);
        clearComInfo();
    }

    public void showListFoods(List<Food> list) {
        int size = list.size();
        Object[][] foods = new Object[size][5];
        for (int i = 0; i < size; i++) {
            foods[i][0] = list.get(i).getId();
            foods[i][1] = list.get(i).getName();
            foods[i][2] = numFormat.format(list.get(i).getPrice());
            foods[i][3] = list.get(i).getQty();
        }
        foodTable.setModel(new DefaultTableModel(foods, foodColumnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        foodIdField.setEditable(false);
        billField.setEditable(false);
        cart.setEditable(false);
        qtySpinner.setEnabled(false);
    }

    public void fillClientfromSelectedRow() {
        int row = clientTable.getSelectedRow();
        if (row >= 0) {
            idField.setText(clientTable.getModel().getValueAt(row, 0).toString());
            nameField.setText(clientTable.getModel().getValueAt(row, 1).toString());
            ageField.setText(clientTable.getModel().getValueAt(row, 2).toString());
            if (clientTable.getModel().getValueAt(row, 3).equals("Nam")) {
                genderCombobox.setSelectedIndex(0);
            } else if (clientTable.getModel().getValueAt(row, 3).equals("Nữ")) {
                genderCombobox.setSelectedIndex(1);
            } else {
                genderCombobox.setSelectedIndex(2);
            }
            phoneField.setText(clientTable.getModel().getValueAt(row, 4).toString());
            balanceField
                    .setText(clientTable.getModel().getValueAt(row, 5).toString().replace(" ₫", "").replace(".", ""));
            discountField.setText(clientTable.getModel().getValueAt(row, 6).toString().replace("%", ""));
            totalField.setText(clientTable.getModel().getValueAt(row, 7).toString().replace(" ₫", "").replace(".", ""));
            addBtn.setEnabled(false);
            editBtn.setEnabled(true);
            delBtn.setEnabled(true);
        }
    }

    public void fillComputerfromSelectedRow() {
        int row = comTable.getSelectedRow();
        if (row >= 0) {
            comIdField.setText(comTable.getModel().getValueAt(row, 0).toString());
            comModelField.setText(comTable.getModel().getValueAt(row, 1).toString());
            comPriceField.setText(comTable.getModel().getValueAt(row, 2).toString().replace(" ₫", "").replace(".", ""));
            comUserField.setText(comTable.getModel().getValueAt(row, 4).toString());
            comStartedTimeField.setText(comTable.getModel().getValueAt(row, 5).toString());
            comLeftTimeField.setText(comTable.getModel().getValueAt(row, 6).toString());
            comRoomField.setText(comTable.getModel().getValueAt(row, 3).toString());

            if (comTable.getModel().getValueAt(row, 4).toString().equals("")) {
                comRentBtn.setEnabled(true);
                comReturnBtn.setEnabled(false);
            } else {
                comRentBtn.setEnabled(false);
                comReturnBtn.setEnabled(true);
            }
            comAddBtn.setEnabled(false);
            comEditBtn.setEnabled(true);
            comDelBtn.setEnabled(true);
        }
    }

    public void fillFoodfromSelectedRow() {
        int row = foodTable.getSelectedRow();
        if (row >= 0) {
            foodIdField.setText(foodTable.getModel().getValueAt(row, 0).toString());
            foodNameField.setText(foodTable.getModel().getValueAt(row, 1).toString());
            foodPriceField
                    .setText(foodTable.getModel().getValueAt(row, 2).toString().replace(" ₫", "").replace(".", ""));
            payCheckBox.setSelected(false);
            qtySpinner.setValue(0);
            foodAddBtn.setEnabled(false);
            foodEditBtn.setEnabled(true);
            foodDelBtn.setEnabled(true);
            qtySpinner.setEnabled(true);
        }
    }

    public void clearClientInfo() {
        idField.setText("");
        nameField.setText("");
        ageField.setText("");
        phoneField.setText("");
        discountField.setText("");
        balanceField.setText("");
        totalField.setText("");
        addBtn.setEnabled(true);
        editBtn.setEnabled(false);
        delBtn.setEnabled(false);
    }

    public void clearComInfo() {
        comIdField.setText("");
        comModelField.setText("");
        comPriceField.setText("");
        comUserField.setText("");
        comStartedTimeField.setText("");
        comLeftTimeField.setText("");
        comRoomField.setText("");
        comAddBtn.setEnabled(true);
        comEditBtn.setEnabled(false);
        comDelBtn.setEnabled(false);
        comRentBtn.setEnabled(false);
        comReturnBtn.setEnabled(false);
    }

    public void clearFoodInfo() {
        foodIdField.setText("");
        foodNameField.setText("");
        foodPriceField.setText("");
        qtySpinner.setValue(0);
        foodAddBtn.setEnabled(true);
        foodEditBtn.setEnabled(false);
        foodDelBtn.setEnabled(false);
        qtySpinner.setEnabled(false);
    }

    public void showClient(Client client) {
        fillClientfromSelectedRow();
        idField.setText("" + client.getId());
        nameField.setText("" + client.getName());
        ageField.setText("" + client.getAge());
        if (client.getGender().equals("Nam")) {
            genderCombobox.setSelectedIndex(0);
        } else if (client.getGender().equals("Nữ")) {
            genderCombobox.setSelectedIndex(1);
        } else {
            genderCombobox.setSelectedIndex(2);
        }
        phoneField.setText("" + client.getPhone());
        discountField.setText("" + client.getDiscount());
        balanceField.setText("" + client.getBalance());
        totalField.setText("" + client.getTotal());
        addBtn.setEnabled(false);
        editBtn.setEnabled(true);
        delBtn.setEnabled(true);
        qtySpinner.setEnabled(true);
    }

    public void showCom(Computer computer) {
        fillComputerfromSelectedRow();
        comIdField.setText("" + computer.getId());
        comModelField.setText("" + computer.getModel());
        comPriceField.setText("" + computer.getPrice());
        comUserField.setText("" + computer.getUser());
        comStartedTimeField.setText("" + computer.getStartedTime());
        comLeftTimeField.setText("" + computer.getLeftTime());
        comRoomField.setText("" + computer.getRoom());
        comAddBtn.setEnabled(false);
        comEditBtn.setEnabled(true);
        comDelBtn.setEnabled(true);
    }

    public void showFood(Food food) {
        fillFoodfromSelectedRow();
        foodIdField.setText("" + food.getId());
        foodNameField.setText("" + food.getName());
        foodPriceField.setText("" + food.getPrice());
        qtySpinner.setEnabled(true);
        foodAddBtn.setEnabled(false);
        foodEditBtn.setEnabled(true);
        foodDelBtn.setEnabled(true);
    }

    public Client getClientInfo() {
        if (!validateName() || !validateAge() || !validatePhone()) {
            return null;
        }

        try {
            Client client = new Client();
            if (idField.getText() != null && !"".equals(idField.getText())) {
                client.setId(Integer.parseInt(idField.getText()));
            }
            client.setName(nameField.getText());
            client.setAge(Integer.parseInt(ageField.getText()));
            client.setGender((String) genderCombobox.getSelectedItem());
            client.setPhone(phoneField.getText());
            return client;
        } catch (Exception e) {
            showMessage("An error occurred while creating the client");
        }
        return null;
    }

    public Computer getComputeInfo() {
        if (!validateComModel() || !validatePrice() || !validateRoom()) {
            return null;
        }
        try {
            Computer computer = new Computer();
            if (comIdField.getText() != null && !"".equals(comIdField.getText())) {
                computer.setId(Integer.parseInt(comIdField.getText()));
            }
            computer.setModel(comModelField.getText());
            computer.setPrice(Double.parseDouble(comPriceField.getText()));
            computer.setRoom(comRoomField.getText());
            return computer;
        } catch (NumberFormatException e) {
            e.printStackTrace();
            showMessage("An error occurred while creating the computer");
        }
        return null;

    }

    public Food getFoodInfo() {
        if (!validateFoodName() || !validateFoodPrice()) {
            return null;
        }
        try {
            Food food = new Food();
            if (foodIdField.getText() != null && !"".equals(foodIdField.getText())) {
                food.setId(Integer.parseInt(foodIdField.getText()));
            }
            food.setName(foodNameField.getText());
            food.setPrice(Double.parseDouble(foodPriceField.getText()));
            return food;
        } catch (Exception e) {
            e.printStackTrace();
            showMessage("An error occurred while creating the food");
        }
        return null;
    }

    private boolean validateName() {
        String name = nameField.getText();
        if (name == null || "".equals(name.trim())) {
            nameField.requestFocus();
            showMessage("Tên khách hàng không được trống.");
            return false;
        }
        return true;
    }

    private boolean validateAge() {
        String age = ageField.getText().trim();
        String regex = "^\\d+$";
        Pattern pt = Pattern.compile(regex);
        Matcher mc = pt.matcher(age + "");
        if (age == null || "".equals(age)) {
            ageField.requestFocus();
            showMessage("Tuổi không được để trống");
            return false;
        }
        if (!mc.find()) {
            ageField.requestFocus();
            showMessage("Tuổi không hợp lệ");
            return false;
        }
        if (Integer.parseInt(age) >= 0 && Integer.parseInt(age) < 18) {
            ageField.requestFocus();
            showMessage("Khách chưa đủ 18t");
            return false;
        }
        return true;
    }

    private boolean validatePhone() {
        String phone = phoneField.getText().trim();
        String reg = "^0\\d{9}$";
        Pattern pt = Pattern.compile(reg);
        Matcher mc = pt.matcher(phone);
        if (phone == null || "".equals(phone.trim())) {
            phoneField.requestFocus();
            showMessage("SDT không được trống");
            return false;
        }
        if (!mc.find()) {
            phoneField.requestFocus();
            showMessage("SDT chưa đúng định dạng 10 số");
            return false;
        }
        TableModel model = clientTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (idField.getText().toString().trim().equals(model.getValueAt(i, 0).toString().trim())) {
                continue;
            }
            if (phone.equals(model.getValueAt(i, 4).toString().trim())) {
                phoneField.requestFocus();
                showMessage("SDT đã được sử dụng!");
                return false;
            }
        }
        return true;
    }

    private boolean validateComModel() {
        String name = comModelField.getText();
        if (name == null || "".equals(name.trim())) {
            comModelField.requestFocus();
            showMessage("Model không được trống.");
            return false;
        }
        return true;
    }

    private boolean validatePrice() {
        String price = comPriceField.getText().trim();
        String regex = "^\\d+$";
        Pattern pt = Pattern.compile(regex);
        Matcher mc = pt.matcher(price + "");
        if (price == null || "".equals(price)) {
            comPriceField.requestFocus();
            showMessage("Giá máy không được để trống");
            return false;
        }
        if (!mc.find()) {
            comPriceField.requestFocus();
            showMessage("Giá máy không hợp lệ");
            return false;
        }
        return true;
    }

    private boolean validateRoom() {
        String room = comRoomField.getText();
        if (room == null || "".equals(room.trim())) {
            comRoomField.requestFocus();
            showMessage("Phòng máy không được trống.");
            return false;
        }
        return true;
    }

    private boolean validateFoodName() {
        String name = foodNameField.getText();
        if (name == null || "".equals(name.trim())) {
            foodNameField.requestFocus();
            showMessage("Tên món không được trống.");
            return false;
        }
        return true;
    }

    private boolean validateFoodPrice() {
        String price = foodPriceField.getText().trim();
        String regex = "^\\d+$";
        Pattern pt = Pattern.compile(regex);
        Matcher mc = pt.matcher(price + "");
        if (price == null || "".equals(price)) {
            foodPriceField.requestFocus();
            showMessage("Đơn giá không được để trống");
            return false;
        }
        if (!mc.find()) {
            foodPriceField.requestFocus();
            showMessage("Đơn giá không hợp lệ");
            return false;
        }
        return true;
    }

    private boolean validatePriceValue(JTextField field) {
        String value = field.getText().trim();
        String regex = "^\\d+$";
        Pattern pt = Pattern.compile(regex);
        Matcher mc = pt.matcher(value + "");
        if (value == null || "".equals(value)) {
            field.requestFocus();
            showMessage("Giá trị tìm kiếm chưa hợp lệ");
            return false;
        }
        return true;
    }

    public void showHistoryCom(List<ComHistory> list) {
        JFrame historyFrame = new JFrame("Lịch sử thuê máy");
        historyFrame.setSize(800, 400);
        historyFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        historyFrame.setLocationRelativeTo(this);

        JPanel historyPanel = new JPanel(new BorderLayout());

        // Bảng hiển thị lịch sử
        String[] columnNames = { "ID máy", "Model", "Tên khách hàng", "Thời gian thuê", "Thời gian trả", "Thời gian sử dụng",
                "Phí sử dụng" };
        DefaultTableModel historyTableModel = new DefaultTableModel(columnNames, 0);
        JTable historyTable = new JTable(historyTableModel);
        JScrollPane scrollPane = new JScrollPane(historyTable);

        int size = list.size();
        for (int i = size - 1; i >= 0; i--) {
            long millis = list.get(i).getUseTime();
            long hours = TimeUnit.MILLISECONDS.toHours(millis);
            long minutes = TimeUnit.MILLISECONDS.toMinutes(millis) - TimeUnit.HOURS.toMinutes(hours);
            long seconds = TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(minutes)
                    - TimeUnit.HOURS.toSeconds(hours);

            historyTableModel.addRow(new Object[] {
                    list.get(i).getId(),
                    list.get(i).getName(),
                    list.get(i).getUser(),
                    DateUtils.getTime(list.get(i).getStartTime()),
                    DateUtils.getTime(list.get(i).getEndTime()),
                    String.format("%02d:%02d:%02d", hours, minutes, seconds),
                    numFormat.format(list.get(i).getFee())
            });
        }

        historyPanel.add(scrollPane, BorderLayout.CENTER);
        historyFrame.add(historyPanel);
        historyFrame.setVisible(true);
    }

    public int showIDClient(List<Client> list) {
        int selectedId = -1;

        // Tạo bảng và thêm dữ liệu
        String[] columnNames = { "ID", "Tên khách hàng", "Số dư" };
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        JTable clientTab = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(clientTab);

        for (Client client : list) {
            model.addRow(new Object[] {
                    client.getId(),
                    client.getName(),
                    numFormat.format(client.getBalance())
            });
        }

        // Hiển thị bảng trong JOptionPane
        int result = JOptionPane.showConfirmDialog(null, scrollPane, "Chọn khách hàng", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
            int selectedRow = clientTab.getSelectedRow();
            if (selectedRow != -1) {
                selectedId = (int) model.getValueAt(selectedRow, 0); // Lấy giá trị ID của hàng được chọn
            }
        }

        return selectedId;
    }

    @SuppressWarnings("unchecked")
    public void showListComCombobox(List<Computer> computer) {
        @SuppressWarnings("rawtypes")
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for (Computer com : computer) {
            model.addElement(com.getModel());
        }
        orderCom.setModel(model);
    }

    public int getIndexSortCombobox() {
        return this.sortCombobox.getSelectedIndex();
    }

    public int getIndexSortComCombobox() {
        return this.comSortCombobox.getSelectedIndex();
    }

    public String getNameSearchField() {
        return this.nameSearchField.getText();
    }

    public Double getFromBalanceSearchField() {
        if (!validatePriceValue(fromBalanceSearchField)) {
            return null;
        }
        return Double.parseDouble(this.fromBalanceSearchField.getText());
    }

    public Double getToBalanceSearchField() {
        if (!validatePriceValue(toBalanceSearchField)) {
            return null;
        }
        return Double.parseDouble(this.toBalanceSearchField.getText());
    }

    public int getIndexFoodSortComCombobox() {
        return this.foodSortCombobox.getSelectedIndex();
    }

    public String getFoodSearchField() {
        return this.foodSearchField.getText();
    }

    public String getPriceField1() {
        if (!validatePriceValue(fromPriceSearchField)) {
            return null;
        }
        return this.fromPriceSearchField.getText();
    }

    public String getPriceField2() {
        if (!validatePriceValue(toPriceSearchField)) {
            return null;
        }
        return this.toPriceSearchField.getText();
    }

    public void setBlankCltSearch() {
        nameSearchField.setText("");
        toBalanceSearchField.setText("");
        fromBalanceSearchField.setText("");
    }

    public void setBlankFoodSearch() {
        foodSearchField.setText("");
        fromPriceSearchField.setText("");
        toPriceSearchField.setText("");
    }

    public void actionPerformed(ActionEvent e) {
    }

    public void valueChanged(ListSelectionEvent e) {
    }

    public void addAddClientListener(ActionListener listener) {
        addBtn.addActionListener(listener);
    }

    public void addEditClientListener(ActionListener listener) {
        editBtn.addActionListener(listener);
    }

    public void addDeleteClientListener(ActionListener listener) {
        delBtn.addActionListener(listener);
    }

    public void addClearListener(ActionListener listener) {
        clearBtn.addActionListener(listener);
    }

    public void addSortClientListener(ActionListener listener) {
        sortCombobox.addActionListener(listener);
    }

    public void addListClientSelectionListener(ListSelectionListener listener) {
        clientTable.getSelectionModel().addListSelectionListener(listener);
    }

    public void addSearchListener(ActionListener listener) {
        nameSearchBtn.addActionListener(listener);
    }

    public void addBalanceSearchListener(ActionListener listener) {
        balanceSearchBtn.addActionListener(listener);
    }

    public void addAddComListener(ActionListener listener) {
        comAddBtn.addActionListener(listener);
    }

    public void addEditComListener(ActionListener listener) {
        comEditBtn.addActionListener(listener);
    }

    public void addDeleteComListener(ActionListener listener) {
        comDelBtn.addActionListener(listener);
    }

    public void addClearComListener(ActionListener listener) {
        comClearBtn.addActionListener(listener);
    }

    public void addSortComListener(ActionListener listener) {
        comSortCombobox.addActionListener(listener);
    }

    public void addListComSelectionListener(ListSelectionListener listener) {
        comTable.getSelectionModel().addListSelectionListener(listener);
    }

    public void addReturnComListener(ActionListener listener) {
        comReturnBtn.addActionListener(listener);
    }

    public void addRentComListener(ActionListener listener) {
        comRentBtn.addActionListener(listener);
    }

    public void addChargeClientListener(ActionListener listener) {
        chargeBtn.addActionListener(listener);
    }

    public void addAddFoodListener(ActionListener listener) {
        foodAddBtn.addActionListener(listener);
    }

    public void addEditFoodListener(ActionListener listener) {
        foodEditBtn.addActionListener(listener);
    }

    public void addDeleteFoodListener(ActionListener listener) {
        foodDelBtn.addActionListener(listener);
    }

    public void addClearFoodListener(ActionListener listener) {
        foodClearBtn.addActionListener(listener);
    }

    public void addSortFoodListener(ActionListener listener) {
        foodSortCombobox.addActionListener(listener);
    }

    public void addListFoodSelectionListener(ListSelectionListener listener) {
        foodTable.getSelectionModel().addListSelectionListener(listener);
    }

    public void addSearchFoodListener(ActionListener listener) {
        foodSearchBtn.addActionListener(listener);
    }

    public void addPriceFoodSearchListener(ActionListener listener) {
        priceSearchBtn.addActionListener(listener);
    }

    public void addStatListener(ActionListener listener) {
        statBtn.addActionListener(listener);
    }

    public void addIdleComListener(ActionListener listener) {
        idleComList.addActionListener(listener);
    }

    public void addUsingComListener(ActionListener listener) {
        usingComList.addActionListener(listener);
    }

    public void addHistoryListener(ActionListener listener) {
        historyBtn.addActionListener(listener);
    }

    public void addCltBackListener(ActionListener listener) {
        cltBackBtn.addActionListener(listener);
    }

    public void addFoodBackListener(ActionListener listener) {
        foodBackBtn.addActionListener(listener);
    }

    public void addFoodStatListener(ActionListener listener) {
        foodStatbtn.addActionListener(listener);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField ageField;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JTextField balanceField;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JButton balanceSearchBtn;
    private javax.swing.JButton billBtn;
    private javax.swing.JTextField billField;
    private javax.swing.JTextArea cart;
    private javax.swing.JButton chargeBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTable clientTable;
    private javax.swing.JButton cltBackBtn;
    private javax.swing.JButton comAddBtn;
    private javax.swing.JButton comClearBtn;
    private javax.swing.JButton comDelBtn;
    private javax.swing.JButton comEditBtn;
    private javax.swing.JTextField comIdField;
    private javax.swing.JLabel comIdLabel;
    private javax.swing.JLabel comIdLabel1;
    private javax.swing.JLabel comIdLabel2;
    private javax.swing.JTextField comLeftTimeField;
    private javax.swing.JLabel comLeftTimeLabel;
    private javax.swing.JTextField comModelField;
    private javax.swing.JLabel comModelLabel;
    private javax.swing.JLabel comModelLabel1;
    private javax.swing.JTextField comPriceField;
    private javax.swing.JLabel comPriceLabel;
    private javax.swing.JLabel comPriceLabel1;
    private javax.swing.JLabel comPriceLabel2;
    private javax.swing.JLabel comPriceLabel3;
    private javax.swing.JLabel comPriceLabel4;
    private javax.swing.JLabel comPriceLabel5;
    private javax.swing.JLabel comPriceLabel6;
    private javax.swing.JButton comRentBtn;
    private javax.swing.JButton comReturnBtn;
    private javax.swing.JTextField comRoomField;
    private javax.swing.JComboBox<String> comSortCombobox;
    private javax.swing.JTextField comStartedTimeField;
    private javax.swing.JLabel comStartedTimeLabel;
    private javax.swing.JTable comTable;
    private javax.swing.JTextField comUserField;
    private javax.swing.JLabel comUserLabel;
    private javax.swing.JButton delBtn;
    private javax.swing.JTextField discountField;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton foodAddBtn;
    private javax.swing.JButton foodBackBtn;
    private javax.swing.JButton foodClearBtn;
    private javax.swing.JButton foodDelBtn;
    private javax.swing.JButton foodEditBtn;
    private javax.swing.JTextField foodIdField;
    private javax.swing.JTextField foodNameField;
    private javax.swing.JTextField foodPriceField;
    private javax.swing.JButton foodSearchBtn;
    private javax.swing.JTextField foodSearchField;
    private javax.swing.JComboBox<String> foodSortCombobox;
    private javax.swing.JButton foodStatbtn;
    private javax.swing.JTable foodTable;
    private javax.swing.JTextField fromBalanceSearchField;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel fromLabel1;
    private javax.swing.JTextField fromPriceSearchField;
    private javax.swing.JComboBox<String> genderCombobox;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JButton historyBtn;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton idleComList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nameSearchBtn;
    private javax.swing.JTextField nameSearchField;
    private javax.swing.JComboBox<String> orderCom;
    private javax.swing.JCheckBox payCheckBox;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JButton priceSearchBtn;
    private javax.swing.JSpinner qtySpinner;
    private javax.swing.JButton resetBillBtn;
    private javax.swing.JComboBox<String> sortCombobox;
    private javax.swing.JButton statBtn;
    private javax.swing.JTextField toBalanceSearchField;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel toLabel1;
    private javax.swing.JTextField toPriceSearchField;
    private javax.swing.JTextField totalField;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JButton usingComList;
    // End of variables declaration//GEN-END:variables
}
